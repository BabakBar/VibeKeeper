# VibeKeeper - Quick Start Guide

## 🚀 One-Command Setup & Run

### Prerequisites
- **UV** (Python package manager): `curl -LsSf https://astral.sh/uv/install.sh | sh` (macOS/Linux) or download from https://docs.astral.sh/uv/getting-started/installation/ (Windows)
- **Bun** (JavaScript runtime): `curl -fsSL https://bun.sh/install | bash` (macOS/Linux) or download from https://bun.sh/ (Windows)

---

## ⚡ Fast Start (Two Terminals)

### Terminal 1 - Backend (FastAPI)
```bash
cd mini-mvp/backend && uv sync && uv run uvicorn main:create_app --factory --reload --port 8001
```

### Terminal 2 - Frontend (Nuxt/Vue)
```bash
cd mini-mvp/frontend && bun install && bun dev
```

**That's it!** 
- Frontend: http://localhost:3000
- Backend API: http://localhost:8001  
- API Docs: http://localhost:8001/docs

---

## 📋 Step-by-Step Setup (First Time)

### 1. Environment Setup (Optional)
```bash
# Copy environment template (backend will work without this)
cd mini-mvp/backend
cp .env.example .env
# Edit .env to add OpenAI API key if you want AI extraction features
```

### 2. Install Dependencies

**Backend:**
```bash
cd mini-mvp/backend
uv sync
```

**Frontend:**
```bash
cd mini-mvp/frontend  
bun install
```

### 3. Start Services

**Start Backend (Terminal 1):**
```bash
cd mini-mvp/backend
uv run uvicorn main:create_app --factory --reload --port 8001
```

**Start Frontend (Terminal 2):**
```bash
cd mini-mvp/frontend
bun dev
```

---

## 🌐 Application URLs

| Service | URL | Description |
|---------|-----|-------------|
| **Frontend UI** | http://localhost:3000 | Main VibeKeeper application |
| **Backend API** | http://localhost:8001 | FastAPI REST API |
| **API Documentation** | http://localhost:8001/docs | Interactive API docs (Swagger) |
| **Health Check** | http://localhost:8001/health | Backend status |

---

## 🧪 Quick Test

**1. Health Check:**
```bash
curl http://localhost:8001/health
# Expected: {"status":"ok"}
```

**2. Frontend Test:**
- Open http://localhost:3000
- Try adding: "Sarah's birthday is March 15th"

**3. API Test (with AI - requires OpenAI key):**
```bash
curl -X POST "http://localhost:8001/api/occasions/extract" \
  -H "Content-Type: application/json" \
  -d '{"text": "Team meeting tomorrow at 2pm"}'
```

---

## 🔧 Troubleshooting

**Port conflicts:**
```bash
# Kill processes using ports
# Windows PowerShell:
netstat -ano | findstr :8001
taskkill /PID <PID> /F

# macOS/Linux:
lsof -ti:8001 | xargs kill
lsof -ti:3000 | xargs kill
```

**Common fixes:**
- **Backend won't start:** Make sure you're using `uv run uvicorn` (not just `uvicorn`)
- **Frontend build errors:** Delete `node_modules` and run `bun install` again
- **API connection errors:** Ensure backend is running on port 8001
- **Import errors:** Run `uv sync` to reinstall dependencies

---

## 🛑 Stop Everything

Press `Ctrl+C` in both terminals to stop the servers.

---

## 🔑 Environment Variables (Optional)

Create `mini-mvp/backend/.env` for AI features:
```
OPENAI_API_KEY=your-openai-api-key-here
LITELLM_MODEL=gpt-4o-mini
JWT_SECRET_KEY=your-jwt-secret-here
```

Without these, the app runs with basic functionality (manual occasion entry).

---

## 📦 Project Structure

```
VibeKeeper/
├── mini-mvp/
│   ├── backend/          # FastAPI Python API
│   │   ├── main.py       # App entry point  
│   │   ├── api/          # API routes
│   │   └── .env          # Environment config
│   └── frontend/         # Nuxt/Vue UI
│       ├── app.vue       # Main component
│       └── nuxt.config.ts # Nuxt config
└── run.txt              # This file
```

---

## 🚀 Production Notes

For production deployment:
- Set strong `JWT_SECRET_KEY`: `openssl rand -hex 32`
- Configure production database URL
- Build frontend: `bun run build`
- Use production ASGI server (Gunicorn/Uvicorn)
- Set up proper CORS and security headers

---

**Need help?** Check the logs in both terminal windows for detailed error messages.
